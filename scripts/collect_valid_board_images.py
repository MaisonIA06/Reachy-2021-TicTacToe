#!/usr/bin/env python3
"""
Script de collecte d'images pour le mod√®le ttt-valid-board.tflite

Ce script vous aide √† collecter les images n√©cessaires pour entra√Æner
le mod√®le de validation du plateau (valid/invalid).

Usage:
    python scripts/collect_valid_board_images.py --host localhost --class valid
    python scripts/collect_valid_board_images.py --host localhost --class invalid
"""

import argparse
import cv2
import time
import os
from datetime import datetime
from reachy_sdk import ReachySDK


def warm_up_head(reachy, cycles=10):
    """√âchauffe les moteurs de la t√™te"""
    print(f"üî• √âchauffement des moteurs ({cycles} cycles)...")
    for i in range(cycles):
        reachy.head.look_at(x=0.5, y=0, z=-0.4, duration=1.0)
        time.sleep(0.5)
        reachy.head.look_at(x=0.5, y=0, z=0, duration=1.0)
        time.sleep(0.5)
        print(f"  Cycle {i+1}/{cycles}", end='\r')
    
    reachy.head.look_at(x=0.5, y=0, z=0, duration=1.5)
    time.sleep(1.5)
    print("\n‚úÖ √âchauffement termin√©")


def capture_board(reachy, save_dir, class_label):
    """
    Capture le plateau complet
    
    Args:
        reachy: Instance ReachySDK
        save_dir: Dossier de sauvegarde
        class_label: Label de la classe ('valid' ou 'invalid')
    
    Returns:
        True si succ√®s, False sinon
    """
    # Regarder le plateau
    reachy.head.look_at(x=0.5, y=0, z=-0.6, duration=1.0)
    time.sleep(1.0)
    
    # Capturer
    img = reachy.right_camera.last_frame
    
    if img is None:
        print("‚ùå Erreur: pas d'image captur√©e")
        return False
    
    # Revenir en position repos
    reachy.head.look_at(x=0.5, y=0, z=0, duration=1.0)
    
    # Sauvegarder
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
    filename = f"{class_label}_{timestamp}.jpg"
    filepath = os.path.join(save_dir, filename)
    cv2.imwrite(filepath, img)
    
    return True


def collect_valid_boards(reachy, save_dir, target_count=150):
    """Collecte des images de plateaux valides"""
    print("\n" + "="*70)
    print("üì∏ COLLECTE DES PLATEAUX VALIDES")
    print("="*70)
    print(f"Objectif: {target_count} images")
    print("\n‚ö†Ô∏è Instructions:")
    print("  1. Assurez-vous que le plateau est bien centr√©")
    print("  2. Le plateau doit √™tre enti√®rement visible")
    print("  3. √âclairage correct")
    print("  4. Appuyez sur Entr√©e pour capturer")
    print("  5. Variez l√©g√®rement la position/√©clairage entre les captures")
    print("  6. Tapez 'stop' pour arr√™ter\n")
    
    capture_count = 0
    
    input("Appuyez sur Entr√©e quand vous √™tes pr√™t...")
    
    while capture_count < target_count:
        user_input = input(f"\nCapture #{capture_count+1}/{target_count} - Entr√©e pour capturer (ou 'stop'): ")
        
        if user_input.lower() == 'stop':
            break
        
        if capture_board(reachy, save_dir, 'valid'):
            capture_count += 1
            print(f"  ‚úÖ Image sauvegard√©e ({capture_count}/{target_count})")
        else:
            print(f"  ‚ùå √âchec de la capture")
        
        time.sleep(0.5)
    
    print(f"\nüéâ Collecte termin√©e: {capture_count} images de plateaux valides!")
    return capture_count


def collect_invalid_boards(reachy, save_dir, target_count=150):
    """Collecte des images de plateaux invalides"""
    print("\n" + "="*70)
    print("üì∏ COLLECTE DES PLATEAUX INVALIDES")
    print("="*70)
    print(f"Objectif: {target_count} images")
    print("\n‚ö†Ô∏è Instructions:")
    print("  Cr√©ez des situations INVALIDES, par exemple:")
    print("    - Plateau d√©centr√© ou mal orient√©")
    print("    - Plateau partiellement cach√©")
    print("    - Mauvais √©clairage (trop sombre/clair)")
    print("    - Pas de plateau du tout")
    print("    - Plateau trop proche/trop loin")
    print("    - Main ou objet devant le plateau")
    print("\n  Appuyez sur Entr√©e pour capturer")
    print("  Tapez 'stop' pour arr√™ter\n")
    
    capture_count = 0
    
    input("Appuyez sur Entr√©e quand vous √™tes pr√™t...")
    
    while capture_count < target_count:
        print(f"\n--- Capture #{capture_count+1}/{target_count} ---")
        print("Suggestions de situations invalides:")
        situations = [
            "D√©placez le plateau hors du cadre",
            "Tournez le plateau √† 45 degr√©s",
            "Couvrez une partie du plateau",
            "√âteignez une lumi√®re",
            "Mettez votre main devant",
            "Retirez compl√®tement le plateau",
            "Plateau trop pr√®s de la cam√©ra",
            "Plateau trop loin"
        ]
        import random
        print(f"üí° Suggestion: {random.choice(situations)}")
        
        user_input = input(f"\nEntr√©e pour capturer (ou 'stop'): ")
        
        if user_input.lower() == 'stop':
            break
        
        if capture_board(reachy, save_dir, 'invalid'):
            capture_count += 1
            print(f"  ‚úÖ Image sauvegard√©e ({capture_count}/{target_count})")
        else:
            print(f"  ‚ùå √âchec de la capture")
        
        time.sleep(0.5)
    
    print(f"\nüéâ Collecte termin√©e: {capture_count} images de plateaux invalides!")
    return capture_count


def main():
    parser = argparse.ArgumentParser(description='Collecte d\'images pour ttt-valid-board')
    parser.add_argument('--host', default='localhost', help='Adresse IP de Reachy')
    parser.add_argument('--class', dest='class_label', 
                       choices=['valid', 'invalid'],
                       required=True,
                       help='Classe √† collecter')
    parser.add_argument('--target', type=int, default=150,
                       help='Nombre d\'images cibles (d√©faut: 150)')
    
    args = parser.parse_args()
    
    # D√©finir le dossier de sauvegarde
    save_dir = f'training_data/valid_board/{args.class_label}'
    if not os.path.exists(save_dir):
        print(f"‚ùå Erreur: le dossier {save_dir} n'existe pas!")
        print("Ex√©cutez d'abord: mkdir -p training_data/valid_board/{valid,invalid}")
        return
    
    # Connexion √† Reachy
    print(f"ü§ñ Connexion √† Reachy ({args.host})...")
    try:
        reachy = ReachySDK(host=args.host)
        print("‚úÖ Connect√©")
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return
    
    # Activer la t√™te
    print("üîõ Activation de la t√™te...")
    reachy.turn_on('head')
    time.sleep(1.0)
    print("‚úÖ T√™te activ√©e")
    
    try:
        # √âchauffement
        warm_up_head(reachy, cycles=5)
        
        # Collecte selon la classe
        if args.class_label == 'valid':
            total = collect_valid_boards(reachy, save_dir, args.target)
        else:
            total = collect_invalid_boards(reachy, save_dir, args.target)
        
        # Statistiques
        print("\n" + "="*70)
        print("üìä STATISTIQUES")
        print("="*70)
        existing_count = len([f for f in os.listdir(save_dir) if f.endswith('.jpg')])
        print(f"Total d'images dans {save_dir}: {existing_count}")
        print(f"Recommand√©: 100-200 images par classe")
        
        if existing_count >= 100:
            print("‚úÖ Objectif atteint!")
        elif existing_count >= 50:
            print("‚ö†Ô∏è Continuez √† collecter pour atteindre 100 images")
        else:
            print("‚ùå Continuez √† collecter (encore besoin de plus d'images)")
        
    finally:
        # D√©sactivation
        print("\nüîÑ Retour en position repos...")
        reachy.head.look_at(x=0.5, y=0, z=0, duration=1.5)
        time.sleep(1.5)
        reachy.turn_off('head')
        print("‚úÖ Reachy d√©sactiv√©")


if __name__ == '__main__':
    main()

