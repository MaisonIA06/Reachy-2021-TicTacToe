#!/usr/bin/env python3
"""
Script pour tester les mouvements enregistr√©s du robot Reachy

Usage:
    # Tester un mouvement sp√©cifique
    python scripts/test_recorded_moves.py --name grab_1 --host localhost
    
    # Tester tous les mouvements
    python scripts/test_recorded_moves.py --all --host localhost
    
    # Mode interactif
    python scripts/test_recorded_moves.py --interactive --host localhost
"""

import argparse
import numpy as np
import time
import os
import glob
from reachy_sdk import ReachySDK
from reachy_sdk.trajectory import goto
from reachy_sdk.trajectory.interpolation import InterpolationMode


class MoveTester:
    """Testeur de mouvements pour Reachy"""
    
    def __init__(self, host='localhost'):
        """
        Initialise la connexion avec Reachy
        
        Args:
            host: Adresse IP du robot
        """
        print(f"üîå Connexion au robot Reachy ({host})...")
        self.reachy = ReachySDK(host=host)
        print("‚úÖ Connect√© au robot\n")
        
        # Mapping des noms de joints anciens vers nouveaux
        self.joint_mapping = {
            'right_arm.shoulder_pitch': 'r_arm.r_shoulder_pitch',
            'right_arm.shoulder_roll': 'r_arm.r_shoulder_roll',
            'right_arm.arm_yaw': 'r_arm.r_arm_yaw',
            'right_arm.elbow_pitch': 'r_arm.r_elbow_pitch',
            'right_arm.hand.forearm_yaw': 'r_arm.r_forearm_yaw',
            'right_arm.hand.wrist_pitch': 'r_arm.r_wrist_pitch',
            'right_arm.hand.wrist_roll': 'r_arm.r_wrist_roll',
            'right_arm.hand.gripper': 'r_arm.r_gripper',
        }
        
    def load_move(self, filepath):
        """
        Charge un mouvement depuis un fichier .npz
        
        Args:
            filepath: Chemin vers le fichier .npz
            
        Returns:
            dict: Donn√©es du mouvement ou None si erreur
        """
        try:
            data = np.load(filepath)
            return {key: data[key] for key in data.files}
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement de {filepath} : {e}")
            return None
    
    def convert_joint_name(self, old_name):
        """
        Convertit un ancien nom de joint en nouveau nom
        
        Args:
            old_name: Ancien nom (ex: 'right_arm.shoulder_pitch')
            
        Returns:
            str: Nouveau nom (ex: 'r_arm.r_shoulder_pitch')
        """
        return self.joint_mapping.get(old_name, old_name)
    
    def get_joint_object(self, joint_name):
        """
        R√©cup√®re l'objet Joint correspondant au nom
        
        Args:
            joint_name: Nom du joint (format nouveau SDK)
            
        Returns:
            Joint: Objet joint ou None
        """
        try:
            parts = joint_name.split('.')
            if len(parts) == 2:
                part_name, joint_short_name = parts
                
                if part_name == 'r_arm' and hasattr(self.reachy, 'r_arm'):
                    if hasattr(self.reachy.r_arm, joint_short_name):
                        return getattr(self.reachy.r_arm, joint_short_name)
                elif part_name == 'l_arm' and hasattr(self.reachy, 'l_arm'):
                    if hasattr(self.reachy.l_arm, joint_short_name):
                        return getattr(self.reachy.l_arm, joint_short_name)
                elif part_name == 'head' and hasattr(self.reachy, 'head'):
                    if hasattr(self.reachy.head, joint_short_name):
                        return getattr(self.reachy.head, joint_short_name)
        except Exception as e:
            print(f"‚ö†Ô∏è  Impossible d'acc√©der au joint {joint_name}: {e}")
        
        return None
    
def is_trajectory(self, move_data):
    """
    D√©termine si le mouvement est une trajectoire ou une position simple
    
    Args:
        move_data: Donn√©es du mouvement
        
    Returns:
        bool: True si trajectoire, False si position simple
    """
    # V√©rifier la premi√®re valeur
    first_value = list(move_data.values())[0]
    
    # Si c'est un array avec plus d'un √©l√©ment, c'est une trajectoire
    if isinstance(first_value, np.ndarray):
        # V√©rifier la forme plut√¥t que len() pour √©viter les erreurs avec les scalaires
        if first_value.ndim == 0:  # Scalaire numpy
            return False
        elif first_value.ndim >= 1 and first_value.shape[0] > 1:
            return True
    
    return False
    
    def play_position(self, move_data, duration=2.0):
        """
        Joue une position simple
        
        Args:
            move_data: dict {joint_name: position_value}
            duration: Dur√©e du mouvement
        """
        # Convertir les noms et cr√©er le dictionnaire de positions
        goal_positions = {}
        
        for old_name, value in move_data.items():
            # Convertir le nom
            new_name = self.convert_joint_name(old_name)
            
            # R√©cup√©rer l'objet Joint
            joint_obj = self.get_joint_object(new_name)
            
            if joint_obj is not None:
                # Convertir degr√©s en radians si n√©cessaire
                if isinstance(value, np.ndarray):
                    value = float(value)
                
                # Conversion deg -> rad (valeurs > 6.28 ou < -6.28 sont consid√©r√©es comme des degr√©s)
                position_rad = np.deg2rad(value) if abs(value) > 6.28 else value
                
                goal_positions[joint_obj] = position_rad
        
        if not goal_positions:
            print("‚ùå Aucun joint valide trouv√© dans le mouvement")
            return False
        
        # Ex√©cuter le mouvement
        try:
            goto(
                goal_positions=goal_positions,
                duration=duration,
                interpolation_mode=InterpolationMode.MINIMUM_JERK,
            )
            time.sleep(duration)
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution : {e}")
            return False
    
    def play_trajectory(self, move_data):
        """
        Joue une trajectoire compl√®te
        
        Args:
            move_data: dict {joint_name: array_of_positions}
        """
        # Convertir les noms et cr√©er le dictionnaire de trajectoires
        trajectory = {}
        
        for old_name, values in move_data.items():
            # Convertir le nom
            new_name = self.convert_joint_name(old_name)
            
            # R√©cup√©rer l'objet Joint
            joint_obj = self.get_joint_object(new_name)
            
            if joint_obj is not None:
                # Convertir degr√©s en radians si n√©cessaire
                positions_rad = np.array([
                    np.deg2rad(v) if abs(v) > 6.28 else v
                    for v in values
                ])
                
                trajectory[joint_obj] = positions_rad
        
        if not trajectory:
            print("‚ùå Aucun joint valide trouv√© dans la trajectoire")
            return False
        
        # Jouer la trajectoire point par point √† 100 Hz
        num_points = len(list(trajectory.values())[0])
        
        try:
            for i in range(num_points):
                point = {
                    joint_obj: traj[i]
                    for joint_obj, traj in trajectory.items()
                }
                
                goto(
                    goal_positions=point,
                    duration=0.01,
                    interpolation_mode=InterpolationMode.LINEAR,
                )
                time.sleep(0.01)
                
                # Afficher la progression tous les 10 points
                if i % 10 == 0:
                    progress = int((i / num_points) * 40)
                    bar = "‚ñà" * progress + "‚ñë" * (40 - progress)
                    print(f"\r   [{bar}] {i}/{num_points} points", end='', flush=True)
            
            print(f"\r   [{'‚ñà' * 40}] {num_points}/{num_points} points")
            return True
            
        except Exception as e:
            print(f"\n‚ùå Erreur lors de l'ex√©cution : {e}")
            return False
    
    def test_move(self, name, moves_dir='reachy_tictactoe/moves'):
        """
        Test un mouvement sp√©cifique
        
        Args:
            name: Nom du mouvement (sans extension)
            moves_dir: Dossier contenant les mouvements
        """
        print("=" * 70)
        print(f"üß™ TEST DU MOUVEMENT : {name}")
        print("=" * 70)
        
        filepath = os.path.join(moves_dir, f'{name}.npz')
        
        if not os.path.exists(filepath):
            print(f"‚ùå Fichier non trouv√© : {filepath}\n")
            return False
        
        # Charger le mouvement
        print(f"üìÇ Chargement depuis : {filepath}")
        move_data = self.load_move(filepath)
        
        if move_data is None:
            return False
        
        # D√©terminer le type
        is_traj = self.is_trajectory(move_data)
        move_type = "trajectoire" if is_traj else "position simple"
        
        print(f"üìä Type : {move_type}")
        print(f"üìä Joints : {len(move_data)} joints")
        
        if is_traj:
            num_points = len(list(move_data.values())[0])
            duration = num_points * 0.01
            print(f"üìä Points : {num_points} ({duration:.2f}s)")
        
        print(f"\nüìã Joints concern√©s :")
        for joint_name in move_data.keys():
            new_name = self.convert_joint_name(joint_name)
            print(f"  ‚Ä¢ {joint_name:35s} ‚Üí {new_name}")
        
        # Demander confirmation
        print("\n‚ö†Ô∏è  Le bras va se d√©placer !")
        confirm = input("   Continuer ? (o/n) : ")
        
        if confirm.lower() not in ['o', 'y', 'yes', 'oui']:
            print("‚ùå Test annul√©\n")
            return False
        
        # Activer le bras
        print("\nüîå Activation du bras droit...")
        self.reachy.turn_on('r_arm')
        time.sleep(0.5)
        
        # Jouer le mouvement
        print(f"‚ñ∂Ô∏è  Ex√©cution du mouvement...")
        
        if is_traj:
            success = self.play_trajectory(move_data)
        else:
            success = self.play_position(move_data)
        
        if success:
            print("‚úÖ Mouvement ex√©cut√© avec succ√®s !")
        else:
            print("‚ùå √âchec de l'ex√©cution")
        
        print("=" * 70)
        print()
        
        return success
    
    def list_available_moves(self, moves_dir='reachy_tictactoe/moves'):
        """
        Liste tous les mouvements disponibles
        
        Args:
            moves_dir: Dossier contenant les mouvements
            
        Returns:
            list: Liste des noms de mouvements (sans extension)
        """
        pattern = os.path.join(moves_dir, '*.npz')
        files = glob.glob(pattern)
        
        moves = [
            os.path.splitext(os.path.basename(f))[0]
            for f in files
        ]
        
        return sorted(moves)
    
    def test_all_moves(self, moves_dir='reachy_tictactoe/moves'):
        """
        Test tous les mouvements disponibles
        
        Args:
            moves_dir: Dossier contenant les mouvements
        """
        moves = self.list_available_moves(moves_dir)
        
        if not moves:
            print(f"‚ùå Aucun mouvement trouv√© dans {moves_dir}\n")
            return
        
        print("\n" + "=" * 70)
        print(f"üß™ TEST DE TOUS LES MOUVEMENTS ({len(moves)} mouvements)")
        print("=" * 70)
        
        print(f"\nMouvements √† tester :")
        for i, move in enumerate(moves, 1):
            print(f"  {i:2d}. {move}")
        
        confirm = input(f"\n‚ö†Ô∏è  Tester tous ces mouvements ? (o/n) : ")
        
        if confirm.lower() not in ['o', 'y', 'yes', 'oui']:
            print("‚ùå Tests annul√©s\n")
            return
        
        results = []
        
        for i, move in enumerate(moves, 1):
            print(f"\n\n{'=' * 70}")
            print(f"MOUVEMENT {i}/{len(moves)}")
            print('=' * 70)
            
            success = self.test_move(move, moves_dir)
            results.append((move, success))
            
            if i < len(moves):
                print("\n‚è∏Ô∏è  Pause de 2 secondes avant le prochain mouvement...")
                time.sleep(2)
        
        # R√©sum√©
        print("\n\n" + "=" * 70)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 70)
        
        success_count = sum(1 for _, success in results if success)
        fail_count = len(results) - success_count
        
        print(f"\n‚úÖ R√©ussis : {success_count}/{len(results)}")
        print(f"‚ùå √âchou√©s : {fail_count}/{len(results)}")
        
        if fail_count > 0:
            print(f"\n‚ùå Mouvements en √©chec :")
            for move, success in results:
                if not success:
                    print(f"  ‚Ä¢ {move}")
        
        print("=" * 70)
        print()
    
    def interactive_mode(self, moves_dir='reachy_tictactoe/moves'):
        """Mode interactif"""
        moves = self.list_available_moves(moves_dir)
        
        print("\n" + "=" * 70)
        print("üéØ MODE INTERACTIF - TEST DES MOUVEMENTS")
        print("=" * 70)
        
        if not moves:
            print(f"‚ùå Aucun mouvement trouv√© dans {moves_dir}\n")
            return
        
        while True:
            print(f"\n{'=' * 70}")
            print(f"Mouvements disponibles ({len(moves)}) :")
            print('=' * 70)
            
            for i, move in enumerate(moves, 1):
                print(f"  {i:2d}. {move}")
            
            print("\nCommandes :")
            print("  ‚Ä¢ Num√©ro : Tester un mouvement")
            print("  ‚Ä¢ 'all'  : Tester tous les mouvements")
            print("  ‚Ä¢ 'q'    : Quitter")
            
            choice = input("\n‚û°Ô∏è  Votre choix : ").strip().lower()
            
            if choice == 'q':
                break
            elif choice == 'all':
                self.test_all_moves(moves_dir)
            else:
                try:
                    idx = int(choice) - 1
                    if 0 <= idx < len(moves):
                        self.test_move(moves[idx], moves_dir)
                    else:
                        print("‚ùå Num√©ro invalide")
                except ValueError:
                    print("‚ùå Entr√©e invalide")
    
    def close(self):
        """Ferme proprement la connexion"""
        print("\nüîí D√©sactivation des moteurs...")
        self.reachy.turn_off_smoothly('reachy')
        print("‚úÖ Termin√© !\n")


def main():
    parser = argparse.ArgumentParser(
        description="Teste les mouvements enregistr√©s du robot Reachy",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation :

  # Tester un mouvement sp√©cifique
  python scripts/test_recorded_moves.py --name grab_1
  
  # Tester tous les mouvements
  python scripts/test_recorded_moves.py --all
  
  # Mode interactif (recommand√©)
  python scripts/test_recorded_moves.py --interactive
  
  # Avec un autre robot
  python scripts/test_recorded_moves.py --interactive --host 192.168.1.42
        """
    )
    
    parser.add_argument('--name', type=str, help='Nom du mouvement √† tester')
    parser.add_argument('--all', action='store_true', help='Tester tous les mouvements')
    parser.add_argument('--interactive', action='store_true', help='Mode interactif')
    parser.add_argument('--host', type=str, default='localhost',
                       help='Adresse IP du robot (d√©faut: localhost)')
    parser.add_argument('--moves-dir', type=str, default='reachy_tictactoe/moves',
                       help='Dossier des mouvements (d√©faut: reachy_tictactoe/moves)')
    
    args = parser.parse_args()
    
    # Cr√©er le testeur
    try:
        tester = MoveTester(host=args.host)
    except Exception as e:
        print(f"‚ùå Erreur de connexion au robot : {e}")
        print("   V√©rifiez que le robot est allum√© et accessible")
        return 1
    
    try:
        if args.interactive:
            tester.interactive_mode(args.moves_dir)
        elif args.all:
            tester.test_all_moves(args.moves_dir)
        elif args.name:
            success = tester.test_move(args.name, args.moves_dir)
            if not success:
                return 1
        else:
            print("‚ùå Erreur : utilisez --name, --all ou --interactive")
            parser.print_help()
            return 1
    
    finally:
        tester.close()
    
    return 0


if __name__ == '__main__':
    exit(main())

