#!/usr/bin/env python3
"""
Script de v√©rification des donn√©es d'entra√Ænement

V√©rifie que vous avez collect√© suffisamment d'images pour l'entra√Ænement.

Usage:
    python scripts/check_training_data.py
"""

import os
import glob
from PIL import Image


def check_directory(path, min_images=100, recommended_images=300):
    """V√©rifie un dossier d'images"""
    if not os.path.exists(path):
        return None, "‚ùå Dossier manquant"
    
    images = glob.glob(os.path.join(path, '*.jpg'))
    count = len(images)
    
    # V√©rifier quelques images
    valid_images = 0
    errors = []
    
    for img_path in images[:10]:  # V√©rifier les 10 premi√®res
        try:
            img = Image.open(img_path)
            img.verify()
            valid_images += 1
        except Exception as e:
            errors.append(f"{os.path.basename(img_path)}: {e}")
    
    # Statut
    if count >= recommended_images:
        status = "‚úÖ Excellent"
    elif count >= min_images:
        status = "‚ö†Ô∏è Acceptable"
    else:
        status = "‚ùå Insuffisant"
    
    return count, status, errors


def main():
    print("\n" + "="*70)
    print("üìä V√âRIFICATION DES DONN√âES D'ENTRA√éNEMENT")
    print("="*70)
    
    # V√©rifier les donn√©es boxes
    print("\n1Ô∏è‚É£ MOD√àLE TTT-BOXES (d√©tection des cases)")
    print("-" * 70)
    
    boxes_dirs = {
        'empty': 'training_data/boxes/empty',
        'cube': 'training_data/boxes/cube',
        'cylinder': 'training_data/boxes/cylinder',
    }
    
    boxes_total = 0
    boxes_ready = True
    
    for label, path in boxes_dirs.items():
        count, status, *errors = check_directory(path, min_images=100, recommended_images=300)
        if count is None:
            print(f"  {status} {label:10s}")
            boxes_ready = False
        else:
            boxes_total += count
            print(f"  {status:15s} {label:10s}: {count:4d} images")
            
            if errors and errors[0]:
                print(f"    ‚ö†Ô∏è Erreurs d√©tect√©es dans certaines images:")
                for err in errors[0][:3]:
                    print(f"       {err}")
            
            if count < 100:
                boxes_ready = False
    
    print(f"\n  üìä Total boxes: {boxes_total} images")
    print(f"  üéØ Objectif: 900-1500 images (300-500 par classe)")
    
    if boxes_total >= 900:
        print(f"  ‚úÖ Pr√™t pour l'entra√Ænement!")
    elif boxes_total >= 300:
        print(f"  ‚ö†Ô∏è Minimum atteint, mais plus d'images am√©lioreront la pr√©cision")
    else:
        print(f"  ‚ùå Pas assez d'images ({boxes_total}/300 minimum)")
    
    # V√©rifier les donn√©es valid_board
    print("\n2Ô∏è‚É£ MOD√àLE TTT-VALID-BOARD (validation du plateau)")
    print("-" * 70)
    
    valid_dirs = {
        'valid': 'training_data/valid_board/valid',
        'invalid': 'training_data/valid_board/invalid',
    }
    
    valid_total = 0
    valid_ready = True
    
    for label, path in valid_dirs.items():
        count, status, *errors = check_directory(path, min_images=50, recommended_images=100)
        if count is None:
            print(f"  {status} {label:10s}")
            valid_ready = False
        else:
            valid_total += count
            print(f"  {status:15s} {label:10s}: {count:4d} images")
            
            if errors and errors[0]:
                print(f"    ‚ö†Ô∏è Erreurs d√©tect√©es dans certaines images:")
                for err in errors[0][:3]:
                    print(f"       {err}")
            
            if count < 50:
                valid_ready = False
    
    print(f"\n  üìä Total valid_board: {valid_total} images")
    print(f"  üéØ Objectif: 200-400 images (100-200 par classe)")
    
    if valid_total >= 200:
        print(f"  ‚úÖ Pr√™t pour l'entra√Ænement!")
    elif valid_total >= 100:
        print(f"  ‚ö†Ô∏è Minimum atteint, mais plus d'images am√©lioreront la pr√©cision")
    else:
        print(f"  ‚ùå Pas assez d'images ({valid_total}/100 minimum)")
    
    # R√©sum√© final
    print("\n" + "="*70)
    print("üìã R√âSUM√â")
    print("="*70)
    
    if boxes_ready and valid_ready:
        print("‚úÖ Donn√©es suffisantes pour l'entra√Ænement des deux mod√®les!")
        print("\n‚û°Ô∏è Prochaine √©tape:")
        print("   python scripts/train_models.py --model all")
    elif boxes_ready:
        print("‚úÖ Donn√©es suffisantes pour ttt-boxes")
        print("‚ùå Donn√©es insuffisantes pour ttt-valid-board")
        print("\n‚û°Ô∏è Collectez plus d'images:")
        print("   python scripts/collect_valid_board_images.py --host localhost --class valid")
        print("   python scripts/collect_valid_board_images.py --host localhost --class invalid")
    elif valid_ready:
        print("‚úÖ Donn√©es suffisantes pour ttt-valid-board")
        print("‚ùå Donn√©es insuffisantes pour ttt-boxes")
        print("\n‚û°Ô∏è Collectez plus d'images:")
        print("   python scripts/collect_boxes_images.py --host localhost --class empty")
        print("   python scripts/collect_boxes_images.py --host localhost --class cube")
        print("   python scripts/collect_boxes_images.py --host localhost --class cylinder")
    else:
        print("‚ùå Donn√©es insuffisantes pour les deux mod√®les")
        print("\n‚û°Ô∏è Commencez la collecte:")
        print("   1. python scripts/collect_boxes_images.py --host localhost --class empty")
        print("   2. python scripts/collect_boxes_images.py --host localhost --class cube")
        print("   3. python scripts/collect_boxes_images.py --host localhost --class cylinder")
        print("   4. python scripts/collect_valid_board_images.py --host localhost --class valid")
        print("   5. python scripts/collect_valid_board_images.py --host localhost --class invalid")
    
    print("\nüí° Conseils:")
    print("  - Variez l'√©clairage (matin, apr√®s-midi, lumi√®re artificielle)")
    print("  - Variez les positions des pi√®ces")
    print("  - Bougez l√©g√®rement le plateau entre les captures")
    print("  - Supprimez les images floues ou avec votre main visible")


if __name__ == '__main__':
    main()

